openapi: "3.0.2"
info:
  title: Course API
  description: This service exposes the api of course.
  version: '2021.1.0'
  x-api-id: api-v0001
  x-audience: code-tutor-internal
servers:
  - url: '{server}'
paths:
  /courses:
    post:
      summary: Create a course
      description: The api is used for creating a new course.
      operationId: createCourse
      tags:
        - Course
      requestBody:
        $ref: '#/components/requestBodies/Course'
      responses:
        '201':
          $ref: '#/components/responses/CourseId'
        '400':
          $ref: '#/components/responses/Problem'
        '401':
          $ref: '#/components/responses/Problem'
        '403':
          $ref: '#/components/responses/Problem'
        '404':
          $ref: '#/components/responses/Problem'
        '500':
          $ref: '#/components/responses/Problem'
        '501':
          $ref: '#/components/responses/Problem'
        default:
          $ref: '#/components/responses/Problem'

    get:
      summary: Get a list of course
      description: The api is used for getting a list of course.
      operationId: getCourses
      tags:
        - Course
      responses:
        '202':
          $ref: '#/components/responses/Courses'
        '400':
          $ref: '#/components/responses/Problem'
        '401':
          $ref: '#/components/responses/Problem'
        '403':
          $ref: '#/components/responses/Problem'
        '404':
          $ref: '#/components/responses/Problem'
        '500':
          $ref: '#/components/responses/Problem'
        '501':
          $ref: '#/components/responses/Problem'
        default:
          $ref: '#/components/responses/Problem'

  /courses/{course-id}:
    put:
      summary: Update a course
      description: The api is used for updating a course.
      operationId: updateCourse
      tags:
        - Course
      parameters:
        - $ref: '#/components/parameters/CourseIdPathParam'
      requestBody:
        $ref: '#/components/requestBodies/Course'
      responses:
        '204':
          description: The course was updated successfully.
        '400':
          $ref: '#/components/responses/Problem'
        '401':
          $ref: '#/components/responses/Problem'
        '403':
          $ref: '#/components/responses/Problem'
        '404':
          $ref: '#/components/responses/Problem'
        '500':
          $ref: '#/components/responses/Problem'
        '501':
          $ref: '#/components/responses/Problem'
        default:
          $ref: '#/components/responses/Problem'

  /courses/{course-id}/lessons:
    post:
      summary: Create a lesson
      description: The api is used for creating a new lesson of a specified course.
      operationId: createLesson
      tags:
        - Lesson
      parameters:
        - $ref: '#/components/parameters/CourseIdPathParam'
      requestBody:
        $ref: '#/components/requestBodies/Lesson'
      responses:
        '201':
          $ref: '#/components/responses/LessonId'
        '400':
          $ref: '#/components/responses/Problem'
        '401':
          $ref: '#/components/responses/Problem'
        '403':
          $ref: '#/components/responses/Problem'
        '404':
          $ref: '#/components/responses/Problem'
        '500':
          $ref: '#/components/responses/Problem'
        '501':
          $ref: '#/components/responses/Problem'
        default:
          $ref: '#/components/responses/Problem'

    get:
      summary: Get a list of lessons
      description: The api is used for getting a list of lessons.
      operationId: getLessons
      tags:
        - Lesson
      parameters:
        - $ref: '#/components/parameters/CourseIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/LessonMetas'
        '400':
          $ref: '#/components/responses/Problem'
        '401':
          $ref: '#/components/responses/Problem'
        '403':
          $ref: '#/components/responses/Problem'
        '404':
          $ref: '#/components/responses/Problem'
        '500':
          $ref: '#/components/responses/Problem'
        '501':
          $ref: '#/components/responses/Problem'
        default:
          $ref: '#/components/responses/Problem'

  /courses/{course-id}/lessons/{lesson-id}:
    put:
      summary: Update a lesson
      description: The api is used for updating a lesson.
      operationId: updateLesson
      tags:
        - Lesson
      parameters:
        - $ref: '#/components/parameters/CourseIdPathParam'
        - $ref: '#/components/parameters/LessonIdPathParam'
      requestBody:
        $ref: '#/components/requestBodies/Lesson'
      responses:
        '204':
          description: The lesson was updated successfully.
        '400':
          $ref: '#/components/responses/Problem'
        '401':
          $ref: '#/components/responses/Problem'
        '403':
          $ref: '#/components/responses/Problem'
        '404':
          $ref: '#/components/responses/Problem'
        '500':
          $ref: '#/components/responses/Problem'
        '501':
          $ref: '#/components/responses/Problem'
        default:
          $ref: '#/components/responses/Problem'

    get:
      summary: Get a lesson
      description: The api is used for getting a lesson.
      operationId: getLesson
      tags:
        - Lesson
      parameters:
        - $ref: '#/components/parameters/CourseIdPathParam'
        - $ref: '#/components/parameters/LessonIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/Lesson'
        '400':
          $ref: '#/components/responses/Problem'
        '401':
          $ref: '#/components/responses/Problem'
        '403':
          $ref: '#/components/responses/Problem'
        '404':
          $ref: '#/components/responses/Problem'
        '500':
          $ref: '#/components/responses/Problem'
        '501':
          $ref: '#/components/responses/Problem'
        default:
          $ref: '#/components/responses/Problem'

components:

  headers:
    X-Supported-Versions:
      description: A comma separated list of API versions supported by this resource method, referencing the "api-version" in the Content-Type.
      schema:
        type: string
      example: '2020.1.0'

  parameters:
    CourseIdPathParam:
      name: course-id
      required: true
      description: The id of a course.
      example: 1
      in: path
      schema:
        $ref: '#/components/schemas/Id'

    LessonIdPathParam:
      name: lesson-id
      required: true
      description: The id of a lesson.
      example: 1
      in: path
      schema:
        $ref: '#/components/schemas/Id'

  requestBodies:

    Course:
      description: An object containing the details of a course.
      required: true
      content:
        application/json;api-version=2021.1.0:
          schema:
            $ref: '#/components/schemas/Course'

    Lesson:
      description: An object containing the details of a lesson.
      required: true
      content:
        application/json;api-version=2021.1.0:
          schema:
            $ref: '#/components/schemas/Lesson'

  responses:

    CourseId:
      description: OK
      content:
        application/json;api-version=2021.1.0:
          schema:
            $ref: '#/components/schemas/Id'

    Courses:
      description: OK
      content:
        application/json;api-version=2021.1.0:
          schema:
            $ref: '#/components/schemas/Courses'

    LessonId:
      description: OK
      content:
        application/json;api-version=2021.1.0:
          schema:
            $ref: '#/components/schemas/Id'

    LessonMetas:
      description: OK
      content:
        application/json;api-version=2021.1.0:
          schema:
            $ref: '#/components/schemas/LessonMetas'

    Lesson:
      description: OK
      content:
        application/json;api-version=2021.1.0:
          schema:
            $ref: '#/components/schemas/Lesson'

    Problem:
      description: A generic problem response.
      content:
        application/json;api-version=2021.1.0:
          schema:
            $ref: '#/components/schemas/Problem'

  schemas:

    Problem:
      description: A generic problem response describing a client or server problem.
      required:
        - title
        - status
        - detail
      properties:
        title:
          description: A summary of the problem.
          type: string
          example: Service Unavailable
        status:
          description: The HTTP status code.
          type: integer
          format: int32
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          description: A detail of problem.
          type: string
          example: Connection time out

    Course:
      description: An object which contains details about a course.
      required:
        - name
        - description
      properties:
        name:
          description: The name of a course.
          example: 'java'
          type: string
          maxLength: 255
        iconUri:
          description: The icon that presents for a course.
          type: string
          example: 'htt://domain/java.png'
        orderId:
          description: This specifies the priority for ordering.
          example: 1
          type: integer
          format: int32
        amountLesson:
          description: The amount of lesson.
          example: 20
          type: integer
          format: int32
        description:
          description: The description of a course.
          example: 'This helps you get better Java'
          type: string
        status:
          $ref: '#/components/schemas/Status'

    Courses:
      description: A list of courses.
      type: array
      items:
        $ref: '#/components/schemas/Course'

    Id:
      description: The identification of an object.
      required:
        - id
      properties:
        id:
          description: The value of identification.
          example: 123
          type: integer
          format: int32

    Lesson:
      description: An object which contains details about a lesson.
      required:
        - title
      properties:
        title:
          description: The title of a lesson.
          example: 'Spring MVC for Beginner'
          type: string
          maxLength: 255
        iconUri:
          description: The specified uri of icon.
          example: 'http://icon.png'
          type: string
        content:
          description: The content of a lesson.
          example: 'This helps you get better Java'
          type: string
        metaData:
          $ref: '#/components/schemas/MetaData'
        status:
          $ref: '#/components/schemas/Status'

    MetaData:
      description: An object which contains meta data of a lesson.
      properties:
        amountOfLikes:
          description: The amount of likes.
          example: 20
          type: number
          format: int32
        amountOfComments:
          description: The amount of comments.
          example: 20
          type: number
          format: int32
        createdBy:
          description: The user creates this lesson.
          type: string
          example: 'Nhut.Nguyen'
        createdDate:
          description: The created date-time.
          example: '2017-07-21T17:32:28Z'
          type: string
          format: date-time
        course:
          description: The course that the lesson belongs to.
          example: 'Java'
          type: string

    LessonMetas:
      description: A list of metadata of lessons.
      type: array
      items:
        $ref: '#/components/schemas/LessonMeta'

    LessonMeta:
      description: An object which contains meta data.
      properties:
        title:
          description: The title of a lesson.
          type: string
          example: 'Java Spring Boot'
        metaData:
          $ref: '#/components/schemas/MetaData'

    Status:
      description: The status of a course.
      type: string
      enum:
        - CREATED
        - UPDATED
        - PROCESSING
        - ACTIVATED
        - IN_ACTIVATED